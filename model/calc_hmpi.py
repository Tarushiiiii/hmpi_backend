# -*- coding: utf-8 -*-
# """CALC_Hmpi.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1SCnzivENHRqzJpK57qoNy74XcPtFBHJm

# # Import Library
# """

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score, GridSearchCV,StratifiedKFold
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from xgboost import XGBRegressor
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler,MinMaxScaler, Normalizer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import FunctionTransformer, RobustScaler
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression, Ridge, Lasso, LogisticRegression, ridge_regression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error,accuracy_score, make_scorer, f1_score

# """# Preprocessing"""
df=pd.read_csv("../data/Heavy_metals_dataset.csv")
df.head()

import numpy as np

# WHO / BIS permissible limits
permissible_limits = {
    'Cr (PPM)': 0.05,
    'Mn (PPM)': 0.1,
    'Fe (PPM)': 0.3,
    'Ni (PPM)': 0.02,
    'Cu (PPM)': 0.05,
    'Zn (PPM)': 5.0,
    'As (PPM)': 0.01,
    'Se (PPB)': 40,
    'Ag (PPB)': 50,
    'Cd (PPB)': 3,
    'Pb (PPB)': 10,
    'U (PPB)': 30
}

def calculate_hmpi(values: dict) -> float:
    # """
    # Calculate Heavy Metal Pollution Index (HMPI).

    # Parameters
    # ----------
    # values : dict
    #     Example:
    #     {
    #       "Cr (PPM)": 0.03,
    #       "Mn (PPM)": 0.08,
    #       "Fe (PPM)": 0.25,
    #       ...
    #     }

    # Returns
    # -------
    # HMPI value (float)
    # """
    numerator, denominator = 0, 0

    for metal, limit in permissible_limits.items():
        Ci = values.get(metal, 0)  # concentration entered by user
        Li = limit                 # permissible limit
        Qi = (Ci / Li) * 100       # quality rating
        Wi = 1 / Li                # weight
        numerator += Wi * Qi
        denominator += Wi

    return round(numerator / denominator, 3) if denominator != 0 else np.nan